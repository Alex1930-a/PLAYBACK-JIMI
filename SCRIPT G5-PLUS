import tkinter as tk
from tkinter import messagebox, ttk
import requests
import time
import os
import subprocess
from urllib.parse import urlencode
import threading

CAMERA_API_URL = "http://10.1.1.71:9080/api/device/sendInstruct"
PAR_GENERATOR_URL = "http://core-oci-par-generator.gru.qa/oci/generatePar"
TOKEN = "2zgWDPl7SbZp1TZ95ZKdeV1g4WF_878pqrHn4tJeDC4F4eyU1"
SANDBOX_IP = "http://136.248.81.88:5001"

class PlaybackApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Playback - Câmeras G5_PLUS")
        self.root.geometry("850x580")

        self.imei_var = tk.StringVar()
        self.files = []
        self.pasta_destino = ""

        tk.Label(root, text="Digite o IMEI da Câmera:").pack(pady=5)
        tk.Entry(root, textvariable=self.imei_var, width=40).pack(pady=5)
        tk.Button(root, text="Buscar Filelist", command=self.buscar_filelist).pack(pady=5)

        frame_main = tk.Frame(root)
        frame_main.pack(fill="both", expand=True, padx=10)

        frame_list = tk.Frame(frame_main)
        frame_list.pack(side="left", fill="both", expand=True)

        tk.Label(frame_list, text="Arquivos disponíveis:").pack()
        self.file_listbox = tk.Listbox(frame_list, width=60, height=18, selectmode="extended")
        self.file_listbox.pack(side="left", fill="both", expand=True)

        scrollbar = tk.Scrollbar(frame_list, orient="vertical", command=self.file_listbox.yview)
        scrollbar.pack(side="right", fill="y")
        self.file_listbox.config(yscrollcommand=scrollbar.set)

        frame_status = tk.Frame(frame_main)
        frame_status.pack(side="right", fill="y", padx=(10, 0))
        tk.Label(frame_status, text="Arquivos baixados:").pack()
        self.baixados_listbox = tk.Listbox(frame_status, width=40, height=18)
        self.baixados_listbox.pack(fill="y")

        self.pasta_label = tk.Label(root, text="Arquivos serão salvos em: ", anchor="w", justify="left")
        self.pasta_label.pack(fill="x", padx=10, pady=(5, 2))

        tk.Button(root, text="Abrir Pasta", command=self.abrir_pasta).pack()
        tk.Button(root, text="Baixar Selecionados", command=self.baixar_videos).pack(pady=10)

        self.progress = ttk.Progressbar(root, orient="horizontal", length=600, mode="determinate")
        self.progress.pack(pady=10)

    def enviar_comando(self, imei, cmd_content, request_id):
        payload = {
            "imei": imei,
            "cmdContent": cmd_content,
            "serverFlagId": "0",
            "proNo": "128",
            "platform": "web",
            "requestId": str(request_id),
            "cmdType": "normallns",
            "token": TOKEN
        }
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        try:
            encoded_payload = urlencode(payload)
            response = requests.post(CAMERA_API_URL, data=encoded_payload, headers=headers, timeout=90)
            return response.json()
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao enviar comando: {e}")
            return None

    def buscar_filelist(self):
        imei = self.imei_var.get().strip()
        if not imei:
            messagebox.showwarning("Atenção", "Informe o IMEI.")
            return

        self.file_listbox.delete(0, tk.END)
        self.baixados_listbox.delete(0, tk.END)
        self.pasta_label.config(text="Arquivos serão salvos em: ")
        threading.Thread(target=self._buscar_filelist_thread, args=(imei,), daemon=True).start()

    def _buscar_filelist_thread(self, imei):
        self.progress.start()

        # 1. Envia o comando APN primeiro
        apn_cmd = "APN,ZAP VIVO,zap.vivo.com.br,724,06,,,,vivo,,vivo,,,,"
        resp_apn = self.enviar_comando(imei, apn_cmd, request_id=9)
        if resp_apn and resp_apn.get("code") == 0:
            self.show_info("APN pública enviada à câmera com sucesso.")
        else:
            self.show_info("Falha ao enviar comando APN. Tente novamente.")
            self.progress.stop()
            return

        time.sleep(5)  # Espera a ativação do chip

        # 2. Envia o comando FILELIST com a URL pública direta (sandbox)
        filelist_url = f"{SANDBOX_IP}/filelist"
        resp_filelist_url = self.enviar_comando(imei, f"FILELIST,{filelist_url}", request_id=10)
        if resp_filelist_url and resp_filelist_url.get("code") == 0:
            self.show_info("Comando FILELIST com URL enviado com sucesso.")
        else:
            self.show_info("Falha ao enviar comando FILELIST com URL.")
            self.progress.stop()
            return

        time.sleep(5)

        # 3. Solicita o envio da lista
        resp_filelist = self.enviar_comando(imei, "FILELIST", request_id=11)
        if resp_filelist and resp_filelist.get("code") == 0:
            self.show_info("Comando para solicitar FILELIST enviado com sucesso.")
        else:
            self.show_info("Falha ao solicitar FILELIST.")
            self.progress.stop()
            return

        time.sleep(7)

        try:
            resp = requests.get(f"{SANDBOX_IP}/filelist/{imei}/files")
            self.files = resp.json()

            self.file_listbox.delete(0, tk.END)
            if not self.files:
                self.file_listbox.insert(tk.END, "Nenhum arquivo encontrado.")
            else:
                if isinstance(self.files[0], str):
                    self.files = [{"name": f} for f in self.files]

                for f in self.files:
                    self.file_listbox.insert(tk.END, f.get("name"))

            self.pasta_destino = os.path.abspath(os.path.join("videos_baixados", imei))
            self.pasta_label.config(text=f"Arquivos serão salvos em: {self.pasta_destino}")

        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao buscar arquivos: {e}")
        finally:
            self.progress.stop()

    def baixar_videos(self):
        imei = self.imei_var.get().strip()
        selecionados = self.file_listbox.curselection()
        if not selecionados:
            messagebox.showwarning("Atenção", "Selecione pelo menos um arquivo.")
            return
        if len(selecionados) > 6:
            messagebox.showwarning("Atenção", "Você pode baixar no máximo 6 arquivos por vez.")
            return

        arquivos = []
        for idx in selecionados:
            if idx >= len(self.files):
                continue
            arquivos.append(self.files[idx].get('name'))

        if not arquivos:
            messagebox.showwarning("Atenção", "Nenhum arquivo válido selecionado.")
            return

        threading.Thread(target=self._baixar_videos_thread, args=(imei, arquivos), daemon=True).start()

    def _baixar_videos_thread(self, imei, arquivos):
        self.progress["value"] = 0
        self.progress["maximum"] = 100 * len(arquivos)

        pasta = os.path.join("videos_baixados", imei)
        os.makedirs(pasta, exist_ok=True)

        for i, arquivo in enumerate(arquivos, 1):
            nome_sem_ext = arquivo.replace(".mp4", "")
            # Comando com ,1 no final para G5_PLUS
            self.enviar_comando(imei, f"HVIDEO,{nome_sem_ext},1", request_id=20 + i)

            time.sleep(2)
            self.progress["value"] += 50

            # URL do OCI para G5_PLUS
            oci_url = f"https://objectstorage.sa-saopaulo-1.oraclecloud.com/n/grkocmhf7oyf/b/PD-JimiG5-Plus-Objects/o/EVENT_{imei}_00000000_{arquivo}"
            try:
                par_resp = requests.put(PAR_GENERATOR_URL, json={"url": oci_url})
                link = par_resp.json().get("url")
                if not link:
                    messagebox.showerror("Erro", f"Link PAR não retornado para o arquivo {arquivo}.")
                    continue
                video_resp = requests.get(link)
                destino = os.path.join(pasta, arquivo)
                with open(destino, "wb") as f:
                    f.write(video_resp.content)

                self.baixados_listbox.insert(tk.END, arquivo)

            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao baixar o arquivo {arquivo}: {e}")
                continue

        self.progress["value"] = 100 * len(arquivos)
        messagebox.showinfo("Sucesso", f"{len(arquivos)} arquivo(s) baixado(s) com sucesso em:\n{os.path.abspath(pasta)}")

    def abrir_pasta(self):
        if self.pasta_destino and os.path.exists(self.pasta_destino):
            try:
                os.startfile(self.pasta_destino)  # Windows
            except:
                subprocess.Popen(["xdg-open", self.pasta_destino])  # Linux
        else:
            messagebox.showinfo("Aviso", "Nenhuma pasta disponível ainda.")

    def show_info(self, texto):
        messagebox.showinfo("Informação", texto)

if __name__ == "__main__":
    root = tk.Tk()
    app = PlaybackApp(root)
    root.mainloop()
